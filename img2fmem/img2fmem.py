#!/usr/bin/env python3

# img2fmem.py - image to FPGA memory map converter 2025 edition
# (C)2025 Will Green, open source software released under the MIT License
# For latest version and docs visit https://github.com/projf/fpgatools

"""Image to FPGA memory map converter"""

import os
import sys
from PIL import Image

if (len(sys.argv) != 4 and len(sys.argv) != 5):
    print("Convert image files to FPGA memory maps in $readmemh or Xilinx COE format.")
    print("usage: img2fmem.py image_file colour_bits output_format palette_bits")
    print("         image_file: source image file name")
    print("         colour_bits: number of colour index bits per pixel: 4, 6, or 8")
    print("         output_format: mem or coe")
    print("         palette_bits: number of palette bits: 12, 15, or 24")
    print("\nExample: img2fmem.py test.png 8 mem 24")
    sys.exit()

MESSAGE = "Generated by img2fmem.py from Project F - https://github.com/projf/fpgatools\n"

input_file = sys.argv[1]
base_name = os.path.splitext(input_file)[0]

colour_bits = int(sys.argv[2])
if colour_bits == 4:
    pal_size = 16
elif colour_bits == 6:
    pal_size = 64
else:  # choose default if palette size if invalid
    pal_size = 256  # default to 8-bit

output_format = sys.argv[3]

palette_bits = 12       # default to 12 bit output (4 bits per colour) - as in 2018 version
if len(sys.argv) == 5:
    palette_bits = int(sys.argv[4])
    if palette_bits != 15 and palette_bits != 24:  # choose default if depth is invalid
        palette_bits = 12   # 12 bit output (4 bits per colour)

# load source image
source_img = Image.open(input_file)
(width, height) = source_img.size  # used for formatting output

# Convert to limited colour palette
dest_img = source_img.quantize(colors=pal_size, method=Image.Quantize.MEDIANCUT)
dest_pal = dest_img.getpalette()

# Generate hex image output
image_data = dest_img.getdata()
image_output = ''
width_cnt = 0
if output_format == 'mem':
    image_output += "// " + MESSAGE
    for d in image_data:
        if pal_size == 16:  # only one hex digit needed
            image_output += f"{d:01X}"
        else:
            image_output += f"{d:02X}"
        if (width_cnt == width - 1):
            image_output += "\n"
            width_cnt = 0
        else:
            image_output += " "
            width_cnt = width_cnt + 1
elif output_format == 'coe':
    image_output += "; " + MESSAGE
    image_output += f"memory_initialization_radix=16;\n"  # hex format
    image_output += "memory_initialization_vector=\n"
    for d in image_data:
        if pal_size == 16:
            image_output += f"{d:01X},"
        else:
            image_output += f"{d:02X},"
        if (width_cnt == width - 1):
            image_output += "\n"
            width_cnt = 0
        else:
            image_output += " "
            width_cnt = width_cnt + 1
    # replace last comma with semicolon to complete coe statement
    image_output = image_output[:-2]
    image_output += ";\n"
else:
    print("Error: output_format should be mem or coe.")
    sys.exit()

with open(base_name + '.' + output_format, 'w', encoding="utf-8") as f:
    f.write(image_output)

# Generate hex palette output
palette_output = ''
if output_format == 'mem':
    palette_output += "// " + MESSAGE
    for i in range(0, len(dest_pal), 3):
        r, g, b = dest_pal[i], dest_pal[i+1], dest_pal[i+2]
        if palette_bits == 12:
            r = r >> 4
            g = g >> 4
            b = b >> 4
            palette_output += f"{r:01X}{g:01X}{b:01X} "
        elif palette_bits == 15:
                r = r >> 3
                g = g >> 3
                b = b >> 3
                rgb = (r << 10) | (g << 5) | b
                palette_output += f"{rgb:04X} "
        else:  # 24-bit
            palette_output += f"{r:02X}{g:02X}{b:02X} "
    # replace last space with newline
    palette_output = palette_output[:-1]
    palette_output += "\n"
elif output_format == 'coe':
    palette_output += "; " + MESSAGE
    palette_output += f"memory_initialization_radix=16;\n"
    palette_output += "memory_initialization_vector="
    for i in range(0, len(dest_pal), 3):
        r, g, b = dest_pal[i], dest_pal[i+1], dest_pal[i+2]
        if palette_bits == 12:
            r = r >> 4
            g = g >> 4
            b = b >> 4
            palette_output += f"{r:01X}{g:01X}{b:01X}, "
        elif palette_bits == 15:
                r = r >> 3
                g = g >> 3
                b = b >> 3
                rgb = (r << 10) | (g << 5) | b
                palette_output += f"{rgb:04X}, "
        else:  # 24-bit
            palette_output += f"{r:02X}{g:02X}{b:02X}, "
    # replace last comma with semicolon to complete coe statement
    palette_output = palette_output[:-2]
    palette_output += ";\n"
else:
    print("Error: output_format should be mem or coe.")
    sys.exit()

with open(base_name + '_palette.' + output_format, 'w', encoding="utf-8") as f:
    f.write(palette_output)

# Save preview image and save
dest_img.save(base_name + '_preview.png')
